/* src/scep.h */

#ifndef SCEP_H_
#define SCEP_H_

#include <stdarg.h>
#include <string.h>
#include <libgen.h>

#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
#include <openssl/err.h>

#define DEFAULT_SIGALG EVP_md5()
#define DEFAULT_ENCALG EVP_des_cbc()
#define DEFAULT_VERBOSITY ERROR

#define libscep_VERSION_MAJOR @libscep_VERSION_MAJOR@
#define libscep_VERSION_MINOR @libscep_VERSION_MINOR@
#define libscep_STR(x) #x
#define libscep_VERSION_STR(major, minor) "scep-client v" libscep_STR(major) "." libscep_STR(minor)

#define MESSAGE_TYPE_PKCSREQ "19"
#define MESSAGE_TYPE_CERTREQ "3"
#define MESSAGE_TYPE_GETCERTINITIAL "20"
#define MESSAGE_TYPE_GETCERT "21"
#define MESSAGE_TYPE_GETCRL "22"

// number of nonce bytes, defined by protocol
#define NONCE_LENGTH 16

#define SCEP_SELFSIGNED_EXPIRE_DAYS 7

#define SCEP_MIME_GETCA_RA "application/x-x509-ca-ra-cert"
#define SCEP_MIME_GETCA "application/x-x509-ca-cert"

#define scep_log(handle, verbosity, format, ...) \
    _scep_log(handle, verbosity, __FILE__, __LINE__, format, ##__VA_ARGS__)

#define OSSL_ERR(msg, ...)                              \
    do {                                                \
        error = SCEPE_OPENSSL;                          \
        ERR_print_errors(handle->configuration->log);   \
        scep_log(handle, FATAL, msg, ##__VA_ARGS__);    \
        goto finally;                                   \
    } while(0)

typedef enum {
    FATAL,
    ERROR,
    WARN,
    INFO,
    DEBUG,
} SCEP_VERBOSITY;

typedef enum {
    /* Global options */
    SCEPCFG_VERBOSITY,
    SCEPCFG_SIGALG,
    SCEPCFG_ENCALG,
    SCEPCFG_LOG,

    /* Flags to be set */
    SCEPCFG_FLAG_CLEAR, // clear all flags
    SCEPCFG_FLAG_SET,
} SCEPCFG_TYPE;

typedef enum {
    SCEPE_OK,
    SCEPE_MEMORY,
    SCEPE_UNKNOWN_CONFIGURATION,
    SCEPE_UNKOWN_OPERATION,
    SCEPE_DUPLICATE_BIO,

    SCEPE_MISSING_CSR,
    SCEPE_MISSING_REQ_KEY,
    SCEPE_MISSING_CA_CERT,
    SCEPE_MISSING_SIGKEY,
    SCEPE_MISSING_SIGCERT,
    SCEPE_MISSING_CERT_KEY,
    SCEPE_MISSING_CRL_CERT,

    SCEPE_INVALID_CONTENT,
    SCEPE_UNHANDLED,

    SCEPE_NYI,
    SCEPE_OPENSSL,

    // this always needs to be the last error for unit tests. It is used to
    // make sure we test all error messages.
    SCEPE_DUMMY_LAST_ERROR,
} SCEP_ERROR;

typedef enum {
    SCEPOP_NONE,
    SCEPOP_GETCACERT,
    SCEPOP_PKCSREQ,
    SCEPOP_GETCERT,
    SCEPOP_GETCRL,
    SCEPOP_GETNEXTCACERT,
    SCEPOP_GETCERTINITIAL,
} SCEP_OPERATION;

enum {
    SUCCESS = 0,
    FAILURE = 2,
    PENDING = 3,
} SCEP_PKISTATUS;

typedef enum {
    badAlg = 0,
    badMessageCheck = 1,
    badRequest = 2,
    badTime = 3,
    badCertId = 4,
} SCEP_FAILINFO;

typedef enum {
    SCEP_SKIP_SIGNER_CERT           = 0x0001,
    SCEP_ALLOW_MULTIPLE_SIGNER_CERT = 0x0002,
} SCEP_FLAGS;

typedef struct {
    SCEP_VERBOSITY verbosity;
    EVP_MD *sigalg;
    EVP_CIPHER *encalg;
    BIO *log;
    SCEP_FLAGS flags;
} SCEP_CONFIGURATION;

typedef struct {
    int messageType;
    int pkiStatus;
    int failInfo;
    int senderNonce;
    int recipientNonce;
    int transId;
    int extensionReq;
} SCEP_OIDS;

typedef struct {
    SCEP_CONFIGURATION *configuration;
    SCEP_OIDS *oids;
} SCEP;

typedef struct pkcs7_issuer_and_subject_st
{
    X509_NAME *issuer;
    X509_NAME *subject;
} PKCS7_ISSUER_AND_SUBJECT;

/* public return value containing all relevant values of a request */
typedef struct {
	int initialEnrollment;
    char *transactionID;
    unsigned char *senderNonce;
    unsigned char *recipientNonce;
    unsigned char *challenge_password;
    X509 *signer_certificate;
    char *messageType;
    int messageType_int;
    union {
        X509_REQ *request;  // PKCSReq
        X509_CRL *crl;  // GetCRL
        PKCS7_ISSUER_AND_SERIAL *issuer_and_serial; // GetCert
        PKCS7_ISSUER_AND_SUBJECT *issuer_and_subject; // GetCertInitial
    };
} SCEP_DATA;

/* internal structure to handle operations */
struct p7_data_t {
    PKCS7 *p7;
    BIO *bio;
    PKCS7_SIGNER_INFO *signer_info;
    unsigned char sender_nonce[NONCE_LENGTH];
    char *transaction_id;
};

/* External functions */
SCEP_ERROR scep_init(SCEP **handle);
void scep_cleanup(SCEP *handle);
SCEP_ERROR scep_conf_set(SCEP *handle, SCEPCFG_TYPE type, ...);
char *scep_strerror(SCEP_ERROR err);
SCEP_ERROR scep_PKCS7_base64_encode(SCEP *handle, PKCS7 *p7, char **encoded);
SCEP_ERROR scep_new_selfsigned_X509(
    SCEP *handle, X509_REQ *req, EVP_PKEY *req_key, X509 **cert);

SCEP_ERROR scep_pkcsreq(
    SCEP *handle, X509_REQ *req, X509 *sig_cert, EVP_PKEY *sig_key,
    X509 *enc_cert, const EVP_CIPHER *enc_alg, PKCS7 **pkiMessage);
SCEP_ERROR scep_unwrap(
    SCEP *handle, PKCS7 *pkiMessage, X509 *cacert, EVP_PKEY *cakey,
    SCEP_DATA **output);
SCEP_ERROR scep_get_cert_initial(
    SCEP *handle, X509_REQ *req, X509 *sig_cert, EVP_PKEY *sig_key,
    X509 *cacert, X509 *enc_cert, const EVP_CIPHER *enc_alg,
    PKCS7 **pkiMessage);
SCEP_ERROR scep_get_cert(
    SCEP *handle, X509_REQ *req, X509 *sig_cert, EVP_PKEY *sig_key,
    X509 *cacert, X509 *enc_cert, const EVP_CIPHER *enc_alg,
    PKCS7 **pkiMessage);
SCEP_ERROR scep_get_crl(
    SCEP *handle, X509_REQ *req, X509 *sig_cert, EVP_PKEY *sig_key,
    X509 *req_cert, X509 *enc_cert, const EVP_CIPHER *enc_alg,
    PKCS7 **pkiMessage);

/* Internal functions */

/* scep.c */
SCEP_ERROR scep_create_oids(SCEP *);

/* configuration.c */
SCEP_ERROR scep_conf_init(SCEP *handle);
void scep_conf_free(SCEP_CONFIGURATION *conf);
SCEP_ERROR scep_conf_sanity_check(SCEP *handle);

/* util.c */
SCEP_ERROR scep_calculate_transaction_id(
    SCEP *handle, EVP_PKEY *pubkey, char **transaction_id);
void _scep_log(SCEP *handle, SCEP_VERBOSITY verbosity, const char *file,
        int line, char *format, ...);
int X509_REQ_cmp(X509_REQ *req1, X509_REQ *req2);
DECLARE_ASN1_FUNCTIONS(PKCS7_ISSUER_AND_SUBJECT)

/* message.c */
SCEP_ERROR scep_p7_client_init(
    SCEP *handle, EVP_PKEY *req_pubkey, X509 *sig_cert, EVP_PKEY *sig_key,
    struct p7_data_t *p7data);
SCEP_ERROR scep_p7_server_init(SCEP *handle, struct p7_data_t *p7data);
SCEP_ERROR scep_p7_final(SCEP *handle, struct p7_data_t *p7data, PKCS7 **p7);

SCEP_ERROR scep_pkiMessage(
    SCEP *handle, char *messageType, BIO *data,
    X509 *enc_cert, const EVP_CIPHER *enc_alg,
    struct p7_data_t *p7data);

SCEP_ERROR verify(
    SCEP *handle, PKCS7 *pkiMessage, X509_STORE * store, BIO *encData);
#endif /* SCEP_H_ */
